TODO
====

- Render texture
x   profile in iOS
x   improve demo
x   handle gl.clear better (states)
x   handle depth/stencil/color clear better and change resetFrameBuffer in renderer
  - figure out ios problem with stencil buffer
x   remove renderTexture.end
x  - transparent bg clear color / general problem with opacity
x    - Problem is that texture alpha = 0.0 (or value of alpha if we use bitmap data to create texture)
x   FrameBuffer/RenderBuffer Manager to avoid calling when no change occurs


- Architecture
  - remove passing textureManager/bufferManager etc : get from current director/renderer

- schedule callbacks in nodes (update with dt)

- lighting

- remove all singletons?
  - use "current" director

- modify opengl context
  - remove openfl OpenGL view: use lime directly
    - openfl GLRenderer sets clearColor every frame and binds framebuffer every frame
  - control over depth/stencil


- Check handling of global uniforms at F4
- Render loop
- Scene and Node
  - scene graph
- handle multiple contexts
  - all objects created with a contextId ?
  - render targets

- Material implementation
  - texture material
  - color material
- View
- html5 development env to automatically build and re-deploy on server

DONE
====

x Intellij
x Use Float32Array and Matrix3D for KFUniform data
x Uniform: set value in GPU
x Global uniforms
x use haxe properties
x Event emitter
x Camera
x   Camera properties
x Geometry
x   VertexAttribute buffers
x StateManager
x MeshNode (Geometry and Material)
x update camera matrices if not added to the scene
x attribute state manager
x pass state managers to vertex data (remove singleton)
x get OpenGL doc offline
x custom attributes
x interleaved data
x store vertex attribute size, type (GL.Float, etc) in VertexData rather than separate maps
x handle ubyte color arrays
x update haxe, openfl, lime
x Int32Array indexes not working?
x verify/set float precisions in shaders
x textures
x   use state/texture manager for binding textures
x   don't create GLTexture immediately : wait until 'update' render phase
x   texture uniforms
x     automatically bind texture on material update
x   texture units ?
x     manual or automatic ?
x   unbind texture when deleted
x   non-pow2 images
x     need to modify UVs ?
x     three.js offsetRepeat uniform to dynamically scale/translate UVs
x   load from png
x   load from jpg
x   assets or url
x   load textures asynchronously and use callback to indicate that the data can be uploaded to gpu
x   different bit formats (8888, 4444)
x   from color
x handle "prepareForUse" in program uniforms
x verify blending (transparency)
x render order : group by geometries
x   group by materials?
x Primitives
x   plane
x   sphere
x material depth testing
x Performance
x   reuse Float32Array in Uniform.use
x   Try fixed size Float32Array for vertex data
x   Determine if array or matrix values are different (uniform.setMatrix)
x   verify inline getters/setters
x   remove some matrices sent to gpu : rejected since we test which matrices are needed



NAMES
=====

- Pigalle (platform independent graphics library)
- Glass (Graphics Library Agnostic System)
- Alegro