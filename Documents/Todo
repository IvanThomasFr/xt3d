TODO
====

- textures
  - load from png
  - load from jpg
  - assets or url
  - different formats
  - non-pow2 images
    - need to modify UVs ?
    - three.js offsetRepeat uniform to dynamically scale/translate UVs
  - use state/texture manager for binding textures
  - don't create GLTexture immediately : wait until 'update' render phase
    - always load textures asynchronously and use callback to indicate that the data can be uploaded to gpu
  - texture uniforms
    - automatically bind texture on material update
  - texture units ?
    - manual or automatic ?
  - unbind texture when deleted

- Render texture

- remove all singletons?
  - use "current" director
- modify opengl context
  - control over depth/stencil
  - render target


- handle "prepareForUse" in program uniforms
- Check handling of global uniforms at F4
- Render loop
- Scene and Node
  - scene graph
- Primitives
  - plane
  - sphere
   - interlaced data
- handle multiple contexts
  - all objects created with a contextId ?
  - render targets
- render order : group by geometries
  - group by materials?

- Material implementation
  - texture material
  - color material
- View
- html5 development env to automatically build and re-deploy on server

DONE
====

x Intellij
x Use Float32Array and Matrix3D for KFUniform data
x Uniform: set value in GPU
x Global uniforms
x use haxe properties
x Event emitter
x Camera
x   Camera properties
x Geometry
x   VertexAttribute buffers
x StateManager
x MeshNode (Geometry and Material)
x update camera matrices if not added to the scene
x attribute state manager
x pass state managers to vertex data (remove singleton)
x get OpenGL doc offline
x custom attributes
x interleaved data
x store vertex attribute size, type (GL.Float, etc) in VertexData rather than separate maps
x handle ubyte color arrays
x update haxe, openfl, lime
x Int32Array indexes not working?
x verify/set float precisions in shaders
